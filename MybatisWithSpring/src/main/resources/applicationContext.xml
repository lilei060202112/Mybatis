<?xml version="1.0" encoding="UTF-8"?>

    <beans xmlns="http://www.springframework.org/schema/beans"

    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

    xmlns:aop="http://www.springframework.org/schema/aop"

    xmlns:tx="http://www.springframework.org/schema/tx"

    xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis="http://www.mybatis.org/schema/mybatis"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
     http://www.springframework.org/schema/context  
     http://www.springframework.org/schema/context/spring-context-3.0.xsd  
     http://www.mybatis.org/schema/mybatis  
     http://www.mybatis.org/schema/mybatis/mybatis-spring.xsd  
     http://www.springframework.org/schema/mvc  
     http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
	<!-- com.zxr.manager包下的所有.*DaoImpl,.*ServiceImpl都注册关联到Spring容器中去 -->
    <!-- <context:annotation-config/> 
    <context:component-scan base-package="com.zxr.manager">
        <context:include-filter type="regex" expression=".*DaoImpl"/>
        <context:include-filter type="regex" expression=".*ServiceImpl"/>
    </context:component-scan>  -->
		<!-- 实现动态配置 -->
	    <context:property-placeholder location="classpath:postgresql.properties" />  
		<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
	    <property name="driverClassName" value="${jdbc.driverClassName}" />  
	    <property name="url" value="${jdbc.url}" />  
		</bean>  
	
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource" />
		</bean>
	    
	<!--dataSource属性指定要用到的连接池-->
	<!--configLocation属性指定mybatis的核心配置文件-->
	    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	    <!-- 确切地说,任意环境,数据源 和 MyBatis 的事务管理器都会被忽略，而这里cofigLocation属性 
	    存在的原因是含有<settings> 或<typeAliases>部分，不然该属性可以不写的-->
			<!-- <property name="configLocation" value="classpath:Configuration.xml" /> -->  
	   	    <property name="dataSource" ref="dataSource" />  
	   	    <property name="mapperLocations" value="classpath:mapperfile/*.xml" />
		</bean>  
		
	
	    <!-- <bean id="floorMapper" class="org.mybatis.spring.mapper.MapperFactoryBean" >
	
	    sqlSessionFactory属性指定要用到的SqlSessionFactory实例
	
	   		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	
	    mapperInterface属性指定映射器接口，用于实现此接口并生成映射器对象
	
	    	<property name="mapperInterface" value="mapper.FloorMapper"/>
	
	    </bean> --><!--一个Mapper就需要定义一个对应的MapperFactoryBean，如果Mapper多了就不好办了，
	    			所以使用MapperScannerConfigurer的类，通过这个类Mybatis-Spring会自动为我
	    			们注册Mapper对应的MapperFactoryBean对象 -->
		
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        	<property name="basePackage" value="mapper" />  
        	<!-- 还有annatationClass和markerinterface这两个属性用于缩小范围 -->
    	</bean> 
    	
    	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        	<constructor-arg index="0" ref="sqlSessionFactory" />
    	</bean>
    	
    	<bean id="floorDAO" class="common.FloorDAOImpl">
		  <property name="sqlSession" ref="sqlSession" />
		</bean>
    	
    	<!-- <bean id="floorDAO" class="common.FloorDAOImpl">
  			<property name="floorMapper" ref="floorMapper" />
		</bean> --><!-- 这里FooServiceImpl类里可以有一个userMapper属性，就是上面的这个配置，
		这里ref到的userMapper自然就是mapperfactorybean，一个个独立的mapper要写出来，
		而不是用MapperScannerConfigurer-->

    </beans>